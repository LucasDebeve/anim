// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  scope              String?
  id_token           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token") @unique
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Application

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  @@map("users")

  username String? @unique
  bio String?

  // Relationships
  evaluations Evaluation[] @relation("valuer")
  organizations Organization[] @relation("own")
  offers Offer[] @relation("publish")
  comments Comment[] @relation("comments")
  likes Like[] @relation("likes")
}

model Contract {
  id                    String     @id @default(uuid())
  title                 String

  offers Offer[] @relation("contract")
}

model OfferType {
  id                    String     @id @default(uuid())
  title                 String

  offers Offer[] @relation("type")
}

model RateCategory {
  id                    String     @id @default(uuid())
  title                 String

  rates Rate[] @relation("rateCategory")
}

model Rate {
  id                    String     @id @default(uuid())
  value                 Float
  rateCategoryId        String
  evaluationId          String

  rateCategory RateCategory @relation("rateCategory", fields: [rateCategoryId], references: [id])
  evaluation Evaluation @relation("grade", fields: [evaluationId], references: [id])
}

model Evaluation {
  id                    String     @id @default(uuid())
  userId                String
  organizationId        String
  createdAt             DateTime   @default(now())

  user User @relation("valuer", fields: [userId], references: [id])
  rates Rate[] @relation("grade")
  organization Organization @relation("evaluation", fields: [organizationId], references: [id])
}

model Organization {
  id                    String     @id @default(uuid())
  name                  String
  bio                   String
  image                 String     @default("")
  userId                String
  createdAt             DateTime   @default(now())

  user User @relation("own", fields: [userId], references: [id])
  evaluations Evaluation[] @relation("evaluation")
  offers Offer[] @relation("offer")
}

model Offer {
  id                    String     @id @default(uuid())
  title                 String
  description           String
  remuneration          Float
  userId                String
  contractId            String
  organizationId        String
  offerTypeId           String
  beginAt               DateTime
  endAt                 DateTime
  age_min               Int
  age_max               Int
  city                  String
  postal_code           String
  country               String
  interAccepted         Boolean
  createdAt             DateTime   @default(now())

  user User @relation("publish", fields: [userId], references: [id])
  contract Contract @relation("contract", fields: [contractId], references: [id])
  organization Organization @relation("offer", fields: [organizationId], references: [id])
  offerType OfferType @relation("type", fields: [offerTypeId], references: [id])
  comments Comment[] @relation("commented")
  likes Like[] @relation("liked")
}

model Comment {
  id                    String     @id @default(uuid())
  userId                String
  offerId               String
  parentId              String?
  content               String
  createdAt             DateTime   @default(now())

  user User @relation("comments", fields: [userId], references: [id])
  offer Offer @relation("commented", fields: [offerId], references: [id])
  parent Comment? @relation("comment", fields: [parentId], references: [id])
  replies Comment[] @relation("comment")
}

model Like {
  id                    String     @id @default(uuid())
  userId                String
  offerId               String
  createdAt             DateTime   @default(now())

  user User @relation("likes", fields: [userId], references: [id])
  offer Offer @relation("liked", fields: [offerId], references: [id])
  @@unique([userId, offerId])
}